nach EdmondsKarp
0 -> 4 (4.0 / 5.0),
1 -> 6 (1.0 / 1.0),
3 -> 1 (1.0 / 2.0),
3 -> 4 (1.0 / 2.0),
4 -> 6 (5.0 / 5.0),
5 -> 0 (4.0 / 4.0),
5 -> 3 (2.0 / 2.0)

bFlow angewendet
[0 -> 4 (4.0 / 5.0), 3 -> 1 (1.0 / 2.0), 3 -> 4 (1.0 / 2.0)]

START CYCLE CANCELING
Step 2: Generate residual graph
führe negativeCycle aus

negativeCycle ausgeführt
[2 -> 4 (0 / 3.0), 0 -> 2 (0 / 2.0), 4 -> 0 (0 / 4.0)]

Step 3: Get a cycle with negative cost inside the residual graph.
ymin
min(map(lambda e: e.capacity, c))
2.0

flow
[0 -> 2 (2.0 / 2.0), 0 -> 4 (2.0 / 5.0), 2 -> 4 (2.0 / 3.0), 3 -> 1 (1.0 / 2.0), 3 -> 4 (1.0 / 2.0)]

c
[2 -> 4 (0 / 3.0), 0 -> 2 (0 / 2.0), 4 -> 0 (0 / 4.0)]

Step 2: Generate residual graph
führe __negativeCycle aus
function [_cycle_canceling] finished in 0 ms
[0 -> 2 (2.0 / 2.0), 0 -> 4 (2.0 / 5.0), 2 -> 4 (2.0 / 3.0), 3 -> 1 (1.0 / 2.0), 3 -> 4 (1.0 / 2.0)]
cost: 3.0
